{"version":3,"sources":["components/AllCategoryBtn/AllCategoryBtn.tsx","components/CategoryBtn/CategoryBtn.tsx","components/CategoryTitle/CategoryTitle.tsx","components/CreateCategoryBtn/CreateCategoryBtn.tsx","components/CreateCategoryForm/CreateCategoryForm.tsx","components/CreateTodoItemBtn/CreateTodoItemBtn.tsx","components/CreateTodoItemForm/CreateTodoItemForm.tsx","components/TodoItem/TodoItem.tsx","store/actions.ts","store/types.ts","containers/AllCategoryBtn.tsx","containers/AllTaskList.tsx","containers/CategoryBtn.tsx","containers/CategoryTitle.tsx","containers/CreateCategoryBtn.tsx","containers/CreateTodoItemBtn.tsx","containers/CreateTodoItemForm.tsx","containers/CreateCategoryForm.tsx","containers/HandlerCreateCategoryForm.tsx","containers/HandlerCreateTodoForm.tsx","containers/TodoItem.tsx","containers/HandlerTodoItem.tsx","App.tsx","store/todoReducer.ts","store/rootReducer.ts","index.tsx"],"names":["AllCategoryBtn","checkActiveCategory","selectAllTaskBtn","className","onClick","CategoryBtn","name","color","active","selectCategory","id","removeCategory","style","backgroundColor","CategoryTitle","CreateCategoryBtn","showForm","colorDB","SelectCategoryColor","setCategoryColor","map","colorItem","key","type","onChange","htmlFor","CreateCategoryForm","closeForm","sendData","inputFormHandler","onSubmit","placeholder","e","target","value","autoFocus","CreateTodoItemBtn","CreateTodoItemForm","curValue","TodoItem","taskName","toggleTaskStatus","status","removeTask","checked","selectActiveID","payload","deleteTask","handlerComplateTask","setAllTask","useDispatch","state","useSelector","todo","activeCategoryID","todoCategoryList","length","AllTaskList","categoryList","taskList","todoTaskList","dispatch","category","filter","task","todoItem","done","activeCategory","deleteCategory","el","statusForm","setStatusForm","setId","nextTaskID","setCategory","newTask","useState","setTaskName","formValue","preventDefault","trim","categoryID","nextCategoryID","categoryName","setCategoryName","categoryColor","HandlerCreateCategoryForm","statusCategoryForm","setStatusCategoryForm","HandlerCreateTodoForm","statusTodoForm","setStatusTodoForm","activeId","taskItem","item","HandlerTodoItem","App","todoInitialState","rootReducer","combineReducers","action","categoryItem","removeTaskInCategory","setStatusTask","store","createStore","applyMiddleware","reduxLogger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8918f851.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./AllCategoryBtn.scss\";\r\n\r\ntype IAllCategoryBtn = {\r\n  checkActiveCategory: boolean;\r\n  selectAllTaskBtn(): void;\r\n};\r\n\r\nexport const AllCategoryBtn: React.FC<IAllCategoryBtn> = ({\r\n  checkActiveCategory,\r\n  selectAllTaskBtn,\r\n}) => (\r\n  <div\r\n    className={checkActiveCategory ? \"all-category active\" : \"all-category\"}\r\n    onClick={selectAllTaskBtn}\r\n  >\r\n    Все задачи\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./CategoryBtn.scss\";\r\n\r\ntype ICategoryBtn = {\r\n  name: string;\r\n  color: string;\r\n  active: boolean;\r\n  selectCategory(id: number): void;\r\n  removeCategory(id: number): void;\r\n  id: number;\r\n};\r\n\r\nexport const CategoryBtn: React.FC<ICategoryBtn> = ({\r\n  name,\r\n  color,\r\n  active,\r\n  selectCategory,\r\n  id,\r\n  removeCategory,\r\n}) => (\r\n  <div className=\"category__item\">\r\n    <div\r\n      className={active ? \"category__item-container active\" : \"category__item-container\"}\r\n      onClick={() => selectCategory(id)}\r\n    >\r\n      <span className=\"category__color\" style={{ backgroundColor: color }}></span> {name}\r\n    </div>\r\n    <span className=\"category__remove\" onClick={() => removeCategory(id)}></span>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./CategoryTitle.scss\";\r\n\r\ntype ICategoryTitle = {\r\n  name: string;\r\n  color: string;\r\n};\r\n\r\nexport const CategoryTitle: React.FC<ICategoryTitle> = ({ name, color }) => (\r\n  <h1 className=\"title\" style={{ color: color }}>\r\n    {name}\r\n  </h1>\r\n);\r\n","import React from \"react\";\r\nimport \"./CreateCategoryBtn.scss\";\r\n\r\ninterface ICreateCategoryBtn {\r\n  showForm(): void;\r\n}\r\n\r\nexport const CreateCategoryBtn: React.FC<ICreateCategoryBtn> = ({ showForm }) => (\r\n  <div className=\"show-create-category-form\" onClick={showForm}>\r\n    Добавить категорию\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./CreateCategoryForm.scss\";\r\n\r\ninterface ISelectCategoryColor {\r\n  setCategoryColor(color: string): void;\r\n}\r\n\r\ninterface ICreateCategoryForm extends ISelectCategoryColor {\r\n  closeForm(status: false): void;\r\n  sendData(e: React.FormEvent<HTMLFormElement>): void;\r\n  inputFormHandler(name: string): void | false;\r\n}\r\n\r\ntype colorItem = {\r\n  id: string;\r\n  color: string;\r\n};\r\n\r\nconst colorDB = [\r\n  { id: \"color-gray\", color: \"#C9D1D3\" },\r\n  { id: \"color-green\", color: \"#42B883\" },\r\n  { id: \"color-blue\", color: \"#64C4ED\" },\r\n  { id: \"color-pink\", color: \"#FFBBCC\" },\r\n  { id: \"color-lime\", color: \"#B6E6BD\" },\r\n  { id: \"color-purple\", color: \"#C355F5\" },\r\n  { id: \"color-black\", color: \"#09011A\" },\r\n  { id: \"color-red\", color: \"#FF6464\" },\r\n];\r\n\r\nconst SelectCategoryColor: React.FC<ISelectCategoryColor> = ({ setCategoryColor }) => {\r\n  return (\r\n    <div className=\"select-category-color\">\r\n      {colorDB.map((colorItem: colorItem) => (\r\n        <div className=\"color-item\" key={colorItem.color}>\r\n          <input\r\n            className={colorItem.id}\r\n            type=\"radio\"\r\n            id={colorItem.id}\r\n            onChange={() => setCategoryColor(colorItem.color)}\r\n            name=\"select-color\"\r\n          />\r\n          <label htmlFor={colorItem.id} style={{ backgroundColor: colorItem.color }} />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const CreateCategoryForm: React.FC<ICreateCategoryForm> = ({\r\n  closeForm,\r\n  sendData,\r\n  inputFormHandler,\r\n  setCategoryColor,\r\n}) => (\r\n  <div className=\"create-category-form\">\r\n    <div className=\"create-category-form__close-btn\" onClick={() => closeForm(false)}></div>\r\n    <form onSubmit={sendData}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Название папки\"\r\n        onChange={(e) => inputFormHandler(e.target.value)}\r\n        autoFocus\r\n      />\r\n      <SelectCategoryColor setCategoryColor={setCategoryColor} />\r\n      <button className=\"create-category-btn\">Добавить</button>\r\n    </form>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./CreateTodoItemBtn.scss\";\r\n\r\ninterface ICreateTodoItemBtn {\r\n  showForm(): any;\r\n}\r\n\r\nexport const CreateTodoItemBtn: React.FC<ICreateTodoItemBtn> = ({ showForm }) => (\r\n  <div className=\"show-create-todo-form\" onClick={showForm}>\r\n    Новая задача\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./CreateTodoItemForm.scss\";\r\n\r\ninterface ICreateTodoItemForm {\r\n  inputFormHandler(formValue: string): void;\r\n  sendData(e: React.FormEvent<HTMLFormElement>): void;\r\n  curValue: string;\r\n  closeForm(): void;\r\n}\r\n\r\nexport const CreateTodoItemForm: React.FC<ICreateTodoItemForm> = ({\r\n  inputFormHandler,\r\n  curValue,\r\n  sendData,\r\n  closeForm,\r\n}) => (\r\n  <form className=\"create-todo-item-form\" onSubmit={sendData}>\r\n    <input\r\n      type=\"text\"\r\n      placeholder=\"Текст задачи\"\r\n      onChange={(e: React.ChangeEvent<HTMLInputElement>) => inputFormHandler(e.target.value)}\r\n      value={curValue}\r\n      autoFocus\r\n    />\r\n    <button className=\"create-task\">Добавить задачу</button>\r\n    <button className=\"cancel\" onClick={closeForm}>\r\n      Отмена\r\n    </button>\r\n  </form>\r\n);\r\n","import React from \"react\";\r\nimport \"./TodoItem.scss\";\r\n\r\ntype ITodoItem = {\r\n  taskName: string;\r\n  id: number;\r\n  toggleTaskStatus(id: number): void;\r\n  removeTask(id: number): void;\r\n  status: boolean;\r\n};\r\n\r\nexport const TodoItem: React.FC<ITodoItem> = ({\r\n  taskName,\r\n  toggleTaskStatus,\r\n  id,\r\n  status,\r\n  removeTask,\r\n}) => (\r\n  <div className=\"todo-item\">\r\n    <label className=\"todo-item__container\">\r\n      <input type=\"checkbox\" checked={status} onChange={() => toggleTaskStatus(id)} />\r\n      <span>{taskName}</span>\r\n    </label>\r\n    <span className=\"todo-item__remove\" onClick={() => removeTask(id)}></span>\r\n  </div>\r\n);\r\n","import {\r\n  ITodoCategories,\r\n  ITodoTaskList,\r\n  ToDoActionsTypes,\r\n  TODO__CREATE_CATEGORY,\r\n  TODO__CREATE_TASK,\r\n  TODO__DELETE_CATEGORY,\r\n  TODO__DELETE_TASK,\r\n  TODO__HANDLERSTATUS_TASK,\r\n  TODO__SELECT_CATEGORY_ID,\r\n} from \"./types\";\r\n\r\nexport const createNewCategory = (data: ITodoCategories): ToDoActionsTypes => {\r\n  return { type: TODO__CREATE_CATEGORY, payload: data };\r\n};\r\n\r\nexport const deleteCategory = (id: number): ToDoActionsTypes => {\r\n  return { type: TODO__DELETE_CATEGORY, payload: id };\r\n};\r\n\r\nexport const selectActiveID = (id: number): ToDoActionsTypes => {\r\n  return { type: TODO__SELECT_CATEGORY_ID, payload: id };\r\n};\r\n\r\nexport const createTask = (data: ITodoTaskList): ToDoActionsTypes => {\r\n  return { type: TODO__CREATE_TASK, payload: data };\r\n};\r\n\r\nexport const deleteTask = (id: number): ToDoActionsTypes => {\r\n  return { type: TODO__DELETE_TASK, payload: id };\r\n};\r\n\r\nexport const handlerComplateTask = (id: number): ToDoActionsTypes => {\r\n  return { type: TODO__HANDLERSTATUS_TASK, payload: id };\r\n};\r\n","export const TODO__CREATE_TASK = \"ADD_NEW_TODO_TASK_ITEM\";\r\nexport const TODO__CREATE_CATEGORY = \"ADD_NEW_TODO_CATEGORY_ITEM\";\r\nexport const TODO__DELETE_TASK = \"DELETE_TODO_ITEM\";\r\nexport const TODO__DELETE_CATEGORY = \"DELETE_TODO_CATEGORY_ITEM\";\r\nexport const TODO__SELECT_CATEGORY_ID = \"SELECT_TODO_CATEGORY_ID\";\r\nexport const TODO__HANDLERSTATUS_TASK = \"HANDLER_TODO_STATUS_TASK\";\r\n\r\nexport interface ITodoTaskList {\r\n  id: number;\r\n  category: number;\r\n  task: string;\r\n  done: boolean;\r\n}\r\n\r\nexport interface ITodoCategories {\r\n  id: number;\r\n  name: string;\r\n  color: string;\r\n}\r\n\r\ninterface ICreateNewTask {\r\n  type: typeof TODO__CREATE_TASK;\r\n  payload: ITodoTaskList;\r\n}\r\n\r\ninterface ICreateNewCategory {\r\n  type: typeof TODO__CREATE_CATEGORY;\r\n  payload: ITodoCategories;\r\n}\r\n\r\ninterface IDeletedTask {\r\n  type: typeof TODO__DELETE_TASK;\r\n  payload: number;\r\n}\r\n\r\ninterface IDeletedCategory {\r\n  type: typeof TODO__DELETE_CATEGORY;\r\n  payload: number;\r\n}\r\ninterface ISelectedCategoryId {\r\n  type: typeof TODO__SELECT_CATEGORY_ID;\r\n  payload: number;\r\n}\r\n\r\ninterface IHandlerStatusTask {\r\n  type: typeof TODO__HANDLERSTATUS_TASK;\r\n  payload: number;\r\n}\r\n\r\nexport type ToDoActionsTypes =\r\n  | ICreateNewTask\r\n  | ICreateNewCategory\r\n  | IDeletedTask\r\n  | IDeletedCategory\r\n  | ISelectedCategoryId\r\n  | IHandlerStatusTask;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AllCategoryBtnComponents } from \"../components\";\r\nimport { selectActiveID } from \"../store/actions\";\r\nimport { GlobalStateType } from \"../store/rootReducer\";\r\n\r\nexport const AllCategoryBtn: React.FC = (): JSX.Element | null => {\r\n  const setAllTask = useDispatch();\r\n  const state = useSelector((state: GlobalStateType) => state.todo);\r\n  const checkActiveCategory = state.activeCategoryID === 0;\r\n  const checkCreateCategory = state.todoCategoryList.length;\r\n\r\n  const selectAllTaskBtn = (): void => {\r\n    if (!checkActiveCategory) {\r\n      setAllTask(selectActiveID(0));\r\n    }\r\n  };\r\n\r\n  if (checkCreateCategory > 0) {\r\n    return (\r\n      <AllCategoryBtnComponents\r\n        checkActiveCategory={checkActiveCategory}\r\n        selectAllTaskBtn={selectAllTaskBtn}\r\n      />\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { CategoryTitle } from \"../components/CategoryTitle/CategoryTitle\";\r\nimport { TodoItem } from \"../components/TodoItem/TodoItem\";\r\nimport { deleteTask, handlerComplateTask } from \"../store/actions\";\r\nimport { GlobalStateType } from \"../store/rootReducer\";\r\nimport { ITodoCategories, ITodoTaskList } from \"../store/types\";\r\n\r\nexport const AllTaskList: React.FC = () => {\r\n  const categoryList = useSelector((state: GlobalStateType) => state.todo.todoCategoryList);\r\n  const taskList = useSelector((state: GlobalStateType) => state.todo.todoTaskList);\r\n  const dispatch = useDispatch();\r\n\r\n  const toggleTaskStatus = (id: number): void => {\r\n    dispatch(handlerComplateTask(id));\r\n  };\r\n\r\n  const removeTask = (id: number): void => {\r\n    dispatch(deleteTask(id));\r\n  };\r\n\r\n  if (taskList.length > 0) {\r\n    return (\r\n      <>\r\n        {categoryList.map((category: ITodoCategories) => (\r\n          <div key={category.id}>\r\n            <CategoryTitle key={category.id} name={category.name} color={category.color} />\r\n\r\n            {taskList\r\n              .filter((task: ITodoTaskList) => task.category === category.id)\r\n              .map((todoItem: ITodoTaskList) => (\r\n                <TodoItem\r\n                  key={todoItem.id}\r\n                  taskName={todoItem.task}\r\n                  id={todoItem.id}\r\n                  status={todoItem.done}\r\n                  toggleTaskStatus={toggleTaskStatus}\r\n                  removeTask={removeTask}\r\n                />\r\n              ))}\r\n          </div>\r\n        ))}\r\n      </>\r\n    );\r\n  } else {\r\n    return <div className=\"task-list-empty\">Задачи отсутствуют</div>;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { CategoryBtnComponents } from \"../components\";\r\nimport { deleteCategory, selectActiveID } from \"../store/actions\";\r\nimport { GlobalStateType } from \"../store/rootReducer\";\r\nimport { ITodoCategories } from \"../store/types\";\r\n\r\nexport const CategoryBtn: React.FC = (): any => {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((state: GlobalStateType) => state.todo);\r\n  const categoryList = state.todoCategoryList;\r\n  const activeCategory = state.activeCategoryID;\r\n\r\n  const selectCategory = (id: number): void => {\r\n    if (activeCategory !== id) {\r\n      dispatch(selectActiveID(id));\r\n    }\r\n  };\r\n\r\n  const removeCategory = (id: number): void => {\r\n    dispatch(deleteCategory(id));\r\n    dispatch(selectActiveID(0));\r\n  };\r\n\r\n  return categoryList.map(\r\n    (el: ITodoCategories): JSX.Element => {\r\n      const active = el.id === activeCategory;\r\n      return (\r\n        <CategoryBtnComponents\r\n          name={el.name}\r\n          key={el.id}\r\n          color={el.color}\r\n          active={active}\r\n          selectCategory={selectCategory}\r\n          id={el.id}\r\n          removeCategory={removeCategory}\r\n        />\r\n      );\r\n    }\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { CategoryTitleComponents } from \"../components\";\r\nimport { GlobalStateType } from \"../store/rootReducer\";\r\n\r\ninterface ICategoryTitle {\r\n  id: number;\r\n  name: string;\r\n  color: string;\r\n}\r\n\r\nexport const CategoryTitle: React.FC = (): any => {\r\n  const state = useSelector((state: GlobalStateType) => state.todo);\r\n  const activeCategory =\r\n    state.todoCategoryList.filter((el: ICategoryTitle) => el.id === state.activeCategoryID) || [];\r\n\r\n  return activeCategory.map(\r\n    (el: ICategoryTitle): JSX.Element => (\r\n      <CategoryTitleComponents name={el.name} key={el.id} color={el.color} />\r\n    )\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { CreateCategoryBtnComponents } from \"../components\";\r\n\r\ninterface ITaskCategoryBtn {\r\n  statusForm(status: true): void;\r\n}\r\n\r\nexport const CreateCategoryBtn: React.FC<ITaskCategoryBtn> = ({ statusForm }) => {\r\n  const showForm = (): void => {\r\n    statusForm(true);\r\n  };\r\n\r\n  return <CreateCategoryBtnComponents showForm={showForm} />;\r\n};\r\n","import React from \"react\";\r\nimport { CreateTodoItemBtnComponents } from \"../components\";\r\n\r\ninterface ICreateTodoItemBtn {\r\n  setStatusForm(status: true): void;\r\n}\r\n\r\nexport const CreateTodoItemBtn: React.FC<ICreateTodoItemBtn> = ({ setStatusForm }) => {\r\n  const showForm = (): void => {\r\n    setStatusForm(true);\r\n  };\r\n\r\n  return <CreateTodoItemBtnComponents showForm={showForm} />;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { CreateTodoItemFormComponents } from \"../components\";\r\nimport { createTask } from \"../store/actions\";\r\nimport { GlobalStateType } from \"../store/rootReducer\";\r\n\r\ninterface ICreateTodoItemForm {\r\n  setStatusForm(status: false): void;\r\n}\r\n\r\nexport const CreateTodoItemForm: React.FC<ICreateTodoItemForm> = ({ setStatusForm }) => {\r\n  const state = useSelector((state: GlobalStateType) => state.todo);\r\n  const setId = state.nextTaskID;\r\n  const setCategory = state.activeCategoryID;\r\n  const newTask = useDispatch();\r\n  const [taskName, setTaskName] = useState<string>(\"\");\r\n\r\n  // Обработка input внутри form\r\n  const inputFormHandler = (formValue: string): void => {\r\n    setTaskName(formValue);\r\n  };\r\n\r\n  // Закрытие формы\r\n  const closeForm = (): void => {\r\n    setStatusForm(false);\r\n  };\r\n\r\n  // Событие отправки данных из формы\r\n  const sendData = (e: React.FormEvent<HTMLFormElement>): false | void => {\r\n    e.preventDefault();\r\n\r\n    if (taskName.trim() === \"\") {\r\n      return false;\r\n    }\r\n\r\n    newTask(createTask({ id: setId, category: setCategory, task: taskName, done: false }));\r\n\r\n    setTaskName(\"\");\r\n    setStatusForm(false);\r\n  };\r\n\r\n  return (\r\n    <CreateTodoItemFormComponents\r\n      inputFormHandler={inputFormHandler}\r\n      curValue={taskName}\r\n      closeForm={closeForm}\r\n      sendData={sendData}\r\n    />\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { CreateCategoryFormComponents } from \"../components\";\r\nimport { createNewCategory } from \"../store/actions\";\r\nimport { GlobalStateType } from \"../store/rootReducer\";\r\n\r\ninterface ICreateCategoryForm {\r\n  statusForm(status: false): void;\r\n}\r\n\r\nexport const CreateCategoryForm: React.FC<ICreateCategoryForm> = ({ statusForm }) => {\r\n  const dispatch = useDispatch();\r\n  const categoryID = useSelector((state: GlobalStateType) => state.todo.nextCategoryID);\r\n  const [categoryName, setCategoryName] = useState<string>(\"\");\r\n  const [categoryColor, setCategoryColor] = useState<string>(\"#525252\");\r\n\r\n  const sendData = (e: React.FormEvent<HTMLFormElement>): false | void => {\r\n    e.preventDefault();\r\n\r\n    if (categoryName.trim() === \"\") return false;\r\n\r\n    dispatch(createNewCategory({ id: categoryID, color: categoryColor, name: categoryName }));\r\n    statusForm(false);\r\n  };\r\n\r\n  return (\r\n    <CreateCategoryFormComponents\r\n      closeForm={statusForm}\r\n      sendData={sendData}\r\n      inputFormHandler={setCategoryName}\r\n      setCategoryColor={setCategoryColor}\r\n    />\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { CreateCategoryBtn } from \"./CreateCategoryBtn\";\r\nimport { CreateCategoryForm } from \"./CreateCategoryForm\";\r\n\r\nexport const HandlerCreateCategoryForm: React.FC = (): JSX.Element => {\r\n  const [statusCategoryForm, setStatusCategoryForm] = useState<boolean>(false);\r\n\r\n  if (statusCategoryForm) {\r\n    return <CreateCategoryForm statusForm={setStatusCategoryForm} />;\r\n  } else {\r\n    return <CreateCategoryBtn statusForm={setStatusCategoryForm} />;\r\n  }\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { CreateTodoItemBtn } from \"./CreateTodoItemBtn\";\r\nimport { CreateTodoItemForm } from \"./CreateTodoItemForm\";\r\n\r\nexport const HandlerCreateTodoForm: React.FC = () => {\r\n  const [statusTodoForm, setStatusTodoForm] = useState<boolean>(false);\r\n\r\n  if (statusTodoForm) {\r\n    return <CreateTodoItemForm setStatusForm={setStatusTodoForm} />;\r\n  } else {\r\n    return <CreateTodoItemBtn setStatusForm={setStatusTodoForm} />;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { TodoItemComponents } from \"../components\";\r\nimport { deleteTask, handlerComplateTask } from \"../store/actions\";\r\nimport { GlobalStateType } from \"../store/rootReducer\";\r\nimport { ITodoTaskList } from \"../store/types\";\r\n\r\nexport const TodoItem: React.FC = (): any => {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((state: GlobalStateType) => state.todo);\r\n  const activeId = state.activeCategoryID;\r\n  const taskList = state.todoTaskList.filter(\r\n    (taskItem: ITodoTaskList) => activeId === taskItem.category\r\n  );\r\n\r\n  const toggleTaskStatus = (id: number): void => {\r\n    dispatch(handlerComplateTask(id));\r\n  };\r\n\r\n  const removeTask = (id: number): void => {\r\n    dispatch(deleteTask(id));\r\n  };\r\n\r\n  return taskList.map((item: ITodoTaskList) => {\r\n    return (\r\n      <TodoItemComponents\r\n        taskName={item.task}\r\n        key={item.id}\r\n        id={item.id}\r\n        status={item.done}\r\n        toggleTaskStatus={toggleTaskStatus}\r\n        removeTask={removeTask}\r\n      />\r\n    );\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { GlobalStateType } from \"../store/rootReducer\";\r\nimport { AllTaskList } from \"./AllTaskList\";\r\nimport { CategoryTitle } from \"./CategoryTitle\";\r\nimport { HandlerCreateTodoForm } from \"./HandlerCreateTodoForm\";\r\nimport { TodoItem } from \"./TodoItem\";\r\n\r\nexport const HandlerTodoItem = () => {\r\n  const activeCategory = useSelector(\r\n    (state: GlobalStateType): number => state.todo.activeCategoryID\r\n  );\r\n\r\n  if (activeCategory > 0) {\r\n    return (\r\n      <div>\r\n        <CategoryTitle />\r\n        <TodoItem />\r\n        <HandlerCreateTodoForm />\r\n      </div>\r\n    );\r\n  } else {\r\n    return <AllTaskList />;\r\n  }\r\n};\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport {\n  AllCategoryBtn,\n  CategoryBtn,\n  HandlerCreateCategoryForm,\n  HandlerTodoItem,\n} from \"./containers\";\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"app\">\n      <div className=\"app__container\">\n        <div className=\"app__lcol\">\n          <div className=\"category\">\n            <div className=\"category__all\">\n              <AllCategoryBtn />\n            </div>\n            <div className=\"category__list\">\n              <CategoryBtn />\n            </div>\n            <div className=\"category__create\">\n              <HandlerCreateCategoryForm />\n            </div>\n          </div>\n        </div>\n        <div className=\"app__rcol\">\n          <HandlerTodoItem />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import {\r\n  ITodoCategories,\r\n  ITodoTaskList,\r\n  ToDoActionsTypes,\r\n  TODO__CREATE_CATEGORY,\r\n  TODO__CREATE_TASK,\r\n  TODO__DELETE_CATEGORY,\r\n  TODO__DELETE_TASK,\r\n  TODO__HANDLERSTATUS_TASK,\r\n  TODO__SELECT_CATEGORY_ID,\r\n} from \"./types\";\r\n\r\ninterface IToDoReducer {\r\n  todoTaskList: ITodoTaskList[];\r\n  todoCategoryList: ITodoCategories[];\r\n  activeCategoryID: number;\r\n  nextTaskID: number;\r\n  nextCategoryID: number;\r\n}\r\n\r\nconst todoInitialState: IToDoReducer = {\r\n  todoTaskList: [],\r\n  todoCategoryList: [],\r\n  activeCategoryID: 0,\r\n  nextTaskID: 1,\r\n  nextCategoryID: 1,\r\n};\r\n\r\nexport const todoReducer = (state = todoInitialState, action: ToDoActionsTypes): IToDoReducer => {\r\n  switch (action.type) {\r\n    case TODO__CREATE_CATEGORY:\r\n      return {\r\n        ...state,\r\n        todoCategoryList: [...state.todoCategoryList, action.payload],\r\n        nextCategoryID: state.nextCategoryID + 1,\r\n      };\r\n    case TODO__DELETE_CATEGORY:\r\n      const removeCategory = state.todoCategoryList.filter(\r\n        (categoryItem) => categoryItem.id !== action.payload\r\n      );\r\n      const removeTaskInCategory = state.todoTaskList.filter(\r\n        (taskItem) => taskItem.category !== action.payload\r\n      );\r\n      return {\r\n        ...state,\r\n        todoCategoryList: removeCategory,\r\n        todoTaskList: removeTaskInCategory,\r\n      };\r\n    case TODO__SELECT_CATEGORY_ID:\r\n      return { ...state, activeCategoryID: action.payload };\r\n    case TODO__CREATE_TASK:\r\n      return {\r\n        ...state,\r\n        todoTaskList: [...state.todoTaskList, action.payload],\r\n        nextTaskID: state.nextTaskID + 1,\r\n      };\r\n    case TODO__DELETE_TASK:\r\n      const removeTask = [...state.todoTaskList].filter(\r\n        (taskItem) => taskItem.id !== action.payload\r\n      );\r\n      return { ...state, todoTaskList: removeTask };\r\n    case TODO__HANDLERSTATUS_TASK:\r\n      const setStatusTask = [...state.todoTaskList].map((el) =>\r\n        el.id === action.payload ? { ...el, done: !el.done } : el\r\n      );\r\n      return { ...state, todoTaskList: setStatusTask };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { todoReducer } from \"./todoReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  todo: todoReducer,\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type GlobalStateType = ReturnType<RootReducerType>;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./normalize.scss\";\nimport { App } from \"./App\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reduxLogger from \"redux-logger\";\nimport { rootReducer } from \"./store/rootReducer\";\n\nconst store = createStore(rootReducer, applyMiddleware(reduxLogger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}